@model SourceVPP.Models.user

<p style="font-size: 20px; font-weight: bold;">Đổi Mật Khẩu</p>
<p style="font-size: 15px;">Để bảo mật tài khoản, vui lòng không chia sẻ mật khẩu cho người khác</p>
<hr />

<div class="row">
    <div class="col-md-6">
        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label">Mật khẩu cũ</label>
            <div class="col-sm-8">
                <input type="password" class="form-control" name="currentpassword" id="currentpassword" />
                <div class="invalid-feedback">Vui lòng nhập mật khẩu cũ.</div>
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label">Mật khẩu mới</label>
            <div class="col-sm-8">
                <input type="password" class="form-control" name="updatepassword" id="updatepassword" />
                <div class="invalid-feedback">Vui lòng nhập mật khẩu mới.</div>
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-sm-4 col-form-label">Xác nhận mật khẩu</label>
            <div class="col-sm-8">
                <input type="password" class="form-control" name="cfupdatepassword" id="cfupdatepassword" />
                <div class="invalid-feedback">Vui lòng nhập lại mật khẩu khớp với mật khẩu mới đã nhập.</div>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-8 offset-sm-4">
                <button type="button" id="submitBtn" class="btn btn-danger">Xác Nhận</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('submitBtn').addEventListener('click', async function () {
        let isValid = true;

        const currentpassword = document.getElementById('currentpassword');
        const updatepassword = document.getElementById('updatepassword');
        const cfupdatepassword = document.getElementById('cfupdatepassword');

        if (currentpassword.value.trim() === "")
        {
            isValid = false;
            currentpassword.classList.add("is-invalid");
            const passwordFeedback = currentpassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.style.display = 'block';
        }
        else
        {
            currentpassword.classList.remove("is-invalid");
            const passwordFeedback = currentpassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.style.display = 'none';
        }

        if (updatepassword.value.trim() === "")
        {
            isValid = false;
            updatepassword.classList.add("is-invalid");
            const passwordFeedback = updatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.style.display = 'block';
        }
        else if (updatepassword.value.length < 6)
        {
            isValid = false;
            updatepassword.classList.add("is-invalid");
            const passwordFeedback = updatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.innerText = "Mật khẩu phải có ít nhất 6 ký tự.";
            passwordFeedback.style.display = 'block';
        }
        else if (updatepassword.value === currentpassword.value)
        {
            isValid = false;
            updatepassword.classList.add("is-invalid");
            const passwordFeedback = updatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.innerText = "Mật khẩu mới không được trùng với mật khẩu cũ.";
            passwordFeedback.style.display = 'block';
        }
        else
        {
            updatepassword.classList.remove("is-invalid");
            const passwordFeedback = updatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.style.display = 'none';
        }

        if (cfupdatepassword.value.trim() === "")
        {
            isValid = false;
            cfupdatepassword.classList.add("is-invalid");
            const passwordFeedback = cfupdatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.style.display = 'block';
        }
        else if (cfupdatepassword.value !== updatepassword.value)
        {
            isValid = false;
            cfupdatepassword.classList.add("is-invalid");
            const passwordFeedback = cfupdatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.innerText = "Mật khẩu xác nhận không khớp.";
            passwordFeedback.style.display = 'block';
        }
        else
        {
            cfupdatepassword.classList.remove("is-invalid");
            const passwordFeedback = cfupdatepassword.parentElement.querySelector('.invalid-feedback');
            passwordFeedback.style.display = 'none';
        }

        if (isValid)
        {
            const check = await changePassword('@Model.Email', currentpassword.value.trim(), updatepassword.value.trim());

            if (!check)
            {
                currentpassword.classList.add("is-invalid");
                const passwordFeedback = currentpassword.parentElement.querySelector('.invalid-feedback');
                passwordFeedback.innerText = "Mật khẩu cũ không chính xác.";
                passwordFeedback.style.display = 'block';
            }
            else
            {
                currentpassword.classList.remove("is-invalid");
                updatepassword.classList.remove("is-invalid");
                cfupdatepassword.classList.remove("is-invalid");
            }
        }
    });
</script>

